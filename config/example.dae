global {
    ##### Software options.

    # tproxy port to listen on. It is NOT a HTTP/SOCKS port, and is just used by eBPF program.
    # In normal case, you do not need to use it.
    tproxy_port: 12345

    # Set it true to protect tproxy port from unsolicited traffic. Set it false to allow users to use self-managed
    # iptables tproxy rules.
    tproxy_port_protect: true

    # If not zero, traffic sent from dae will be set SO_MARK. It is useful to avoid traffic loop with iptables tproxy
    # rules.
    so_mark_from_dae: 0

    # Log level: error, warn, info, debug, trace.
    log_level: info

    # Disable waiting for network before pulling subscriptions.
    disable_waiting_network: false

    # Enable fast redirect for local TCP connections. There is a known kernel issue that breaks certain clients/proxies, such as nadoo/glider. Users may enable this experimental option at their own risks.
    enable_local_tcp_fast_redirect: false

    ##### Interface and kernel options.

    # The LAN interface to bind. Use it if you want to proxy LAN.
    # Multiple interfaces split by ",".
    #lan_interface: docker0

    # The WAN interface to bind. Use it if you want to proxy localhost.
    # Multiple interfaces split by ",". Use "auto" to auto detect.
    wan_interface: auto

    # Automatically configure Linux kernel parameters like ip_forward and send_redirects. Check out
    # https://github.com/daeuniverse/dae/blob/main/docs/en/user-guide/kernel-parameters.md to see what will dae do.
    auto_config_kernel_parameter: true

    ##### Node connectivity check.

    # Host of URL should have both IPv4 and IPv6 if you have double stack in local.
    # First is URL, others are IP addresses if given.
    # Considering traffic consumption, it is recommended to choose a site with anycast IP and less response.
    #tcp_check_url: 'http://cp.cloudflare.com'
    tcp_check_url: 'http://cp.cloudflare.com,1.1.1.1,2606:4700:4700::1111'

    # The HTTP request method to `tcp_check_url`. Use 'HEAD' by default because some server implementations bypass
    # accounting for this kind of traffic.
    tcp_check_http_method: HEAD

    # This DNS will be used to check UDP connectivity of nodes. And if dns_upstream below contains tcp, it also be used to check
    # TCP DNS connectivity of nodes.
    # First is URL, others are IP addresses if given.
    # This DNS should have both IPv4 and IPv6 if you have double stack in local.
    # udp_check_dns: 'dns.google.com:53'
    udp_check_dns: 'dns.google.com:53,8.8.8.8,2001:4860:4860::8888'

    check_interval: 20s

    # Group will switch node only when new_latency <= old_latency - tolerance.
    check_tolerance: 50ms


    ##### Connecting options.

    # Optional values of dial_mode are:
    # 1. "ip". Dial proxy using the IP from DNS directly. This allows your ipv4, ipv6 to choose the optimal path
    #       respectively, and makes the IP version requested by the application meet expectations. For example, if you
    #       use curl -4 ip.sb, you will request IPv4 via proxy and get a IPv4 echo. And curl -6 ip.sb will request IPv6.
    #       This may solve some wierd full-cone problem if your are be your node support that. Sniffing will be disabled
    #       in this mode.
    # 2. "domain". Dial proxy using the domain from sniffing. This will relieve DNS pollution problem to a great extent
    #       if have impure DNS environment. Generally, this mode brings faster proxy response time because proxy will
    #       re-resolve the domain in remote, thus get better IP result to connect. This policy does not impact routing.
    #       That is to say, domain rewrite will be after traffic split of routing and dae will not re-route it.
    # 3. "domain+". Based on domain mode but do not check the reality of sniffed domain. It is useful for users whose
    #       DNS requests do not go through dae but want faster proxy response time. Notice that, if DNS requests do not
    #       go through dae, dae cannot split traffic by domain.
    # 4. "domain++". Based on domain+ mode but force to re-route traffic using sniffed domain to partially recover
    #       domain based traffic split ability. It doesn't work for direct traffic and consumes more CPU resources.
    dial_mode: domain

    # Allow insecure TLS certificates. It is not recommended to turn it on unless you have to.
    allow_insecure: false

    # Timeout to waiting for first data sending for sniffing. It is always 0 if dial_mode is ip. Set it higher is useful
    # in high latency LAN network.
    sniffing_timeout: 100ms

    # TLS implementation. tls is to use Go's crypto/tls. utls is to use uTLS, which can imitate browser's Client Hello.
    tls_implementation: tls

    # The Client Hello ID for uTLS to imitate. This takes effect only if tls_implementation is utls.
    # See more: https://github.com/daeuniverse/dae/blob/331fa23c16/component/outbound/transport/tls/utls.go#L17
    utls_imitate: chrome_auto
}

# Subscriptions defined here will be resolved as nodes and merged as a part of the global node pool.
# Support to give the subscription a tag, and filter nodes from a given subscription in the group section.
subscription {
}

# Nodes defined here will be merged as a part of the global node pool.
node {
    # Add your node links here.
    # Support socks5, http, https, ss, ssr, vmess, vless, trojan, tuic, juicity, etc.
    # Full support list: https://github.com/daeuniverse/dae/blob/main/docs/en/proxy-protocols.md
    us-dedi-hy: 'hy2://yourpasswd@yourdomain:65533/?sni=yourdomain#dedi%20hy'
    us-dedi-trojan: 'trojan://yourpasswd@yourdomain:40000/?type=tcp&security=tls&sni=yourdomain#dedi%20trojan'
}

# See https://github.com/daeuniverse/dae/blob/main/docs/en/configuration/dns.md for full examples.
dns {
    # For example, if ipversion_prefer is 4 and the domain name has both type A and type AAAA records, the dae will only
    # respond to type A queries and response empty answer to type AAAA queries.
    ipversion_prefer: 4

    # Give a fixed ttl for domains. Zero means that dae will request to upstream every time and not cache DNS results
    # for these domains.
    #fixed_domain_ttl {
    #    ddns.example.org: 10
    #    test.example.org: 3600
    #}

    upstream {
        # Value can be scheme://host:port, where the scheme can be tcp/udp/tcp+udp.
        # If host is a domain and has both IPv4 and IPv6 record, dae will automatically choose
        # IPv4 or IPv6 to use according to group policy (such as min latency policy).
        # Please make sure DNS traffic will go through and be forwarded by dae, which is REQUIRED for domain routing.
        # If dial_mode is "ip", the upstream DNS answer SHOULD NOT be polluted, so domestic public DNS is not recommended.

        # alidns: 'udp://dns.alidns.com:53'
        alidns: 'udp://223.5.5.5:53'
        alibackup: 'udp://223.6.6.6:53'
        dns114: 'udp://114.114.114.114:53'
        googledns: 'tcp+udp://dns.google.com:53'
    }
    routing {
        # According to the request of dns query, decide to use which DNS upstream.
        # Match rules from top to bottom.
        request {
            # Lookup China mainland domains using alidns, otherwise googledns.
            qname(geosite:cn) -> alidns
            # fallback is also called default.
            fallback: googledns
        }
    }
#    routing {
#        # According to the request of dns query, decide to use which DNS upstream.
#        # Match rules from top to bottom.
#        request {
#            # fallback is also called default.
#            fallback: alidns
#        }
#        # According to the response of dns query, decide to accept or re-lookup using another DNS upstream.
#        # Match rules from top to bottom.
#        response {
#            # Trusted upstream. Always accept its result.
#            upstream(googledns) -> accept
#            # Possibly polluted, re-lookup using googledns.
#            ip(geoip:private) && !qname(geosite:cn) -> googledns
#            # fallback is also called default.
#            fallback: accept
#        }
#    }
}

# Node group (outbound).
group {
    proxy {
        # No filter. Use all nodes.

        # Randomly select a node from the group for every connection.
        #policy: random

        # Select the first node from the group for every connection.
        #policy: fixed(0)

        # Select the node with min last latency from the group for every connection.
        #policy: min

        # Select the node with min moving average of latencies from the group for every connection.
        policy: min_moving_avg
        # policy: min_avg10
    }

    no_hk {
        # Filter nodes from the global node pool defined by the subscription and node section above.
        #filter: subtag(my_sub) && !name(keyword: 'ExpireAt:')
        # Multiple filters indicate 'or' logic.
        #filter: subtag(regex: '^my_', another_sub) && !name(keyword: 'ExpireAt:')
        filter: !name(regex: '^hk')

        # Filter nodes from the global node pool defined by tag.
        #filter: name(node1, node2)

        # Filter nodes and give a fixed latency offset to archive latency-based failover.
        # In this example, there is bigger possibility to choose US node even if original latency of US node is higher.
        # filter: name(HK_node)
        # filter: name(US_node) [add_latency: -500ms]

        # Select the node with min average of the last 10 latencies from the group for every connection.
        policy: min_avg10
    }
    hk {
        filter: name(regex: '^hk')
        policy: min_avg10
    }
    jp {
        filter: name(regex: '^jp')
        policy: min_avg10
    }
    no_jp {
        filter: !name(regex: '^jp')
        policy: min_avg10
    }
    us {
        filter: name(regex: '^us')
        policy: min_avg10
    }
    no_us {
        filter: !name(regex: '^us')
        policy: min_avg10
    }
}

# See https://github.com/daeuniverse/dae/blob/main/docs/en/configuration/routing.md for full examples.
routing {
    ### Preset rules.
    fallback: proxy

    # Network managers in localhost should be direct to avoid false negative network connectivity check when binding to
    # WAN.
    pname(NetworkManager, systemd-resolved, dnsmasq,
        qbittorrent, sshd, naiveproxy, adb, localsend_app) -> must_direct

    # Put it in the front to prevent broadcast, multicast and other packets that should be sent to the LAN from being
    # forwarded by the proxy.
    # "dip" means destination IP.
    dip(224.0.0.0/3, 'ff00::/8') -> direct
    dip(192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8, 172.18.58.0/24) -> must_direct

    # This line allows you to access private addresses directly instead of via your proxy. If you really want to access
    # private addresses in your proxy host network, modify the below line.
    dip(geoip:private) -> direct

    # Disable h3 because it usually consumes too much cpu/mem resources.
    # l4proto(udp) && dport(443) -> block

    domain(absx.pages.dev, ecust.edu.cn) -> must_direct
    domain(geosite:telegram, wrtn.ai, geosite:category-porn, v2ex.com, geosite:category-cryptocurrency) -> proxy

    # block
    domain(trace.qq.com, ipuu.net, grammarly.app, api.installer.xiaomi.com, api.sec.miui.com,
        adv.sec.miui.com) -> block

    # direct
    dip(geoip:private, geoip:cn, 127.0.0.1, 172.18.58.54, 20.249.81.245, 47.115.229.102) -> direct
    domain(geosite:cn, geosite:geolocation-cn, geosite:bilibili, geosite:bilibili2, geosite:bilibili-game,
        absx.online, zhihu.com, archlinuxcn.org, raindrop.io, deepl.com,
        itdep.tech, navicat.com.cn, zyqs.xyz, daxiaamu.com, frepai.com, wiki.cic.cab,
        coderbar.com, tencentcloud.com, bilibili.com, auto.c3pool.org
        ) -> direct

    # other
    domain(openwork.jp, disclosure2.edinet-fsa.go.jp) -> jp
    domain(geosite:openai, chatgpt.com, geosite: cloudflare,
        geosite:category-porn, geosite:stackexchange, agedm.org) -> no_hk
    domain(18comic.ink) -> no_jp
    domain(exhentai.org) -> us
}